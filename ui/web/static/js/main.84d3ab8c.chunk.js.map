{"version":3,"sources":["logo.svg","queries.tsx","RunButton.tsx","monaco-util.ts","lastQuery.ts","QueryEditor.tsx","JSONCodeViewer.tsx","QueryHistory.tsx","QueryPage.tsx","QueryShapePage.tsx","ForceGraph.tsx","VisualizePage.tsx","WritePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","languageOptions","label","value","runQuery","serverURL","language","query","a","fetch","URLSearchParams","lang","method","headers","Accept","body","res","json","RunButton","onClick","icon","unelevated","useEditor","React","editor","setEditor","_","firstLanguage","LOCAL_STORAGE_KEY","defaultQuery","text","lastQuery","rawLastQuery","localStorage","getItem","JSON","parse","getCachedLastQuery","getLastQuery","setLastQuery","setItem","stringify","cacheLastQuery","queryLanguageToMonacoLanguage","Error","getGizmoDefinitions","gizmoPath","process","content","run","monacoInit","init","monacoInstance","addAction","id","keybindings","KeyMod","CtrlCmd","KeyCode","Enter","options","minimap","enabled","path","languages","typescript","javascriptDefaults","ScriptTarget","setCompilerOptions","noLib","target","ES5","allowNonTsExtensions","addExtraLib","initMonaco","QueryEditor","onRun","onEditorMount","useState","setLanguage","useEffect","handleEditorMount","useCallback","setValue","handleLanguageChange","event","getValue","registerRunShortcut","onDidChangeModelContent","className","use","height","editorDidMount","outlined","onChange","readOnly","scrollBeyondLastLine","JSONCodeViewer","QueryHistory","queries","reverse","map","option","find","key","time","toLocaleString","result","ACTIVE_QUERY_INITIAL_STATE","QUERIES_INITIAL_STATE","QueryPage","activeTabIndex","setActiveTabIndex","activeQuery","setActiveQuery","setQueries","handleRun","length","Date","then","catch","error","alert","currentQuery","style","width","onActivate","evt","detail","index","QueryShapePage","setResult","getShape","INITIAL_FORCE_DATA","nodes","links","ForceGraph","data","linkComponent","nodeComponent","forceData","setForceData","useDimensions","ref","forceSimulation","force","forceLink","d","distance","forceManyBody","forceCenter","on","graph","resultToGraph","Set","row","source","add","push","values","Link","link","x1","x","y1","y","x2","y2","strokeWidth","stroke","strokeOpacity","Node","node","r","fill","textAnchor","VisualizePage","write","WritePage","mode","setMode","handleRunButtonClick","runDelete","handleModeChange","fileInputRef","useRef","openFileMenu","fileInput","current","click","handleFileInputChange","file","console","log","name","currentTarget","files","type","display","SERVER_URL","App","undefined","page","setPage","src","logo","alt","activated","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84d3ab8c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ca711468.svg\";","export type Language = \"gizmo\" | \"graphql\" | \"mql\";\n\nexport type LanguageOption = {\n  label: string;\n  value: Language;\n};\n\nexport const languageOptions: LanguageOption[] = [\n  { label: \"Gizmo\", value: \"gizmo\" },\n  { label: \"GraphQL\", value: \"graphql\" },\n  { label: \"MQL\", value: \"mql\" }\n];\n\nexport type QueryResult = { result: any } | { error: object } | null;\n\nexport type Query = {\n  id: number;\n  text: string;\n  language: Language;\n  result: QueryResult;\n  time: Date;\n};\n\nexport async function runQuery(\n  serverURL: string,\n  language: string,\n  query: string\n): Promise<QueryResult> {\n  const res = await fetch(\n    `${serverURL}/api/v2/query?${new URLSearchParams({ lang: language })}`,\n    {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/ld+json\"\n      },\n      body: query\n    }\n  );\n  return res.json();\n}\n","import React from \"react\";\nimport { Button } from \"@rmwc/button\";\nimport \"@material/button/dist/mdc.button.css\";\n\nconst RunButton = ({ onClick }: { onClick: () => void }) => (\n  <Button icon=\"play_circle_filled\" unelevated label=\"Run\" onClick={onClick} />\n);\n\nexport default RunButton;\n","import * as React from \"react\";\nimport * as monaco from \"monaco-editor\";\nimport { EditorDidMount } from \"@monaco-editor/react\";\n\nexport const useEditor = (): [\n  EditorDidMount,\n  monaco.editor.IStandaloneCodeEditor | null\n] => {\n  const [editor, setEditor] = React.useState();\n  const handleEditorMount = React.useCallback(\n    (_, editor) => {\n      setEditor(editor);\n    },\n    [setEditor]\n  );\n  return [handleEditorMount, editor];\n};\n","import { Language, languageOptions } from \"./queries\";\n\nconst firstLanguage = languageOptions[0].value;\n\ntype LastQuery = {\n  text: string;\n  language: Language;\n};\n\nconst LOCAL_STORAGE_KEY = \"LAST_QUERY\";\n\nfunction getCachedLastQuery(): LastQuery | null {\n  const rawLastQuery = localStorage.getItem(LOCAL_STORAGE_KEY);\n  if (rawLastQuery) {\n    return JSON.parse(rawLastQuery);\n  }\n  return null;\n}\n\nfunction cacheLastQuery(query: LastQuery): void {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(query));\n}\n\nconst defaultQuery = {\n  text: \"g.V().all()\",\n  language: firstLanguage\n};\n\nlet lastQuery: LastQuery = getCachedLastQuery() || defaultQuery;\n\nexport function getLastQuery(): LastQuery {\n  return lastQuery;\n}\n\nexport function setLastQuery(query: LastQuery): void {\n  lastQuery = query;\n  cacheLastQuery(query);\n}\n","import React, { useState, useCallback, useEffect } from \"react\";\n// eslint-disable-next-\nimport * as monaco from \"monaco-editor\";\nimport { monaco as monacoInit } from \"@monaco-editor/react\";\nimport MonacoEditor from \"@monaco-editor/react\";\nimport { languageOptions, Language } from \"./queries\";\nimport { Typography } from \"@rmwc/typography\";\nimport \"@material/typography/dist/mdc.typography.css\";\nimport { Select } from \"@rmwc/select\";\nimport \"@material/select/dist/mdc.select.css\";\nimport RunButton from \"./RunButton\";\nimport { useEditor } from \"./monaco-util\";\nimport { setLastQuery, getLastQuery } from \"./lastQuery\";\n\nconst queryLanguageToMonacoLanguage = (language: Language): string => {\n  switch (language) {\n    case \"gizmo\": {\n      return \"javascript\";\n    }\n    case \"graphql\": {\n      return \"graphql\";\n    }\n    case \"mql\": {\n      return \"json\";\n    }\n    default: {\n      throw new Error(`Unexpected value ${language}`);\n    }\n  }\n};\n\nconst getGizmoDefinitions = async (): Promise<[string, string]> => {\n  const gizmoPath = `${process.env.PUBLIC_URL}/gizmo.d.ts`;\n  const res = await fetch(gizmoPath);\n  const content = await res.text();\n  return [content, gizmoPath];\n};\n\nasync function registerRunShortcut(\n  editor: monaco.editor.IStandaloneCodeEditor,\n  run: () => void\n): Promise<void> {\n  if (!editor) {\n    return;\n  }\n  const monacoInstance = await monacoInit.init();\n  editor.addAction({\n    // An unique identifier of the contributed action.\n    id: \"cayley-run\",\n\n    // A label of the action that will be presented to the user.\n    label: \"Run\",\n\n    // An optional array of keybindings for the action.\n    keybindings: [monacoInstance.KeyMod.CtrlCmd | monacoInstance.KeyCode.Enter],\n\n    run: () => {\n      run();\n    }\n  });\n}\n\nconst options: monaco.editor.IDiffEditorConstructionOptions = {\n  minimap: { enabled: false }\n};\n\ntype Props = {\n  onRun: (query: string, language: Language) => void;\n};\n\nconst QueryEditor = ({ onRun }: Props) => {\n  const lastQuery = getLastQuery();\n  const [onEditorMount, editor] = useEditor();\n  const [language, setLanguage] = useState(lastQuery.language);\n\n  useEffect(() => {\n    const lastQuery = getLastQuery();\n    setLanguage(lastQuery.language);\n  }, [setLanguage]);\n\n  const handleEditorMount = useCallback(\n    (_, editor) => {\n      const lastQuery = getLastQuery();\n      editor.setValue(lastQuery.text);\n      onEditorMount(_, editor);\n    },\n    [onEditorMount]\n  );\n\n  const handleLanguageChange = React.useCallback(\n    (event: any) => {\n      setLanguage(event.target.value);\n    },\n    [setLanguage]\n  );\n\n  const run = useCallback(() => {\n    if (editor) {\n      onRun(editor.getValue(), language);\n    }\n  }, [editor, language, onRun]);\n\n  useEffect(() => {\n    if (editor) {\n      registerRunShortcut(editor, run);\n    }\n  }, [editor, run]);\n\n  useEffect(() => {\n    if (editor) {\n      editor.onDidChangeModelContent(() => {\n        setLastQuery({\n          text: editor.getValue(),\n          language\n        });\n      });\n    }\n    return () => {\n      if (editor) {\n        setLastQuery({\n          text: editor.getValue(),\n          language\n        });\n      }\n    };\n  }, [editor, language]);\n\n  return (\n    <div className=\"QueryEditor\">\n      <Typography use=\"headline6\">Query Editor</Typography>\n      <MonacoEditor\n        height={300}\n        editorDidMount={handleEditorMount}\n        language={queryLanguageToMonacoLanguage(language)}\n        options={options}\n      />\n      <div className=\"actions\">\n        <RunButton onClick={run} />\n        <Select\n          outlined\n          options={languageOptions}\n          value={language}\n          onChange={handleLanguageChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nasync function initMonaco(): Promise<void> {\n  const [content, path] = await getGizmoDefinitions();\n  const monacoInstance = await monacoInit.init();\n  const {\n    javascriptDefaults,\n    ScriptTarget\n  } = monacoInstance.languages.typescript;\n  javascriptDefaults.setCompilerOptions({\n    noLib: true,\n    target: ScriptTarget.ES5,\n    allowNonTsExtensions: true\n  });\n  javascriptDefaults.addExtraLib(content, path);\n}\n\ninitMonaco();\n\nexport default QueryEditor;\n","import React from \"react\";\nimport * as monaco from \"monaco-editor\";\nimport MonacoEditor from \"@monaco-editor/react\";\n\nconst options: monaco.editor.IDiffEditorConstructionOptions = {\n  readOnly: true,\n  minimap: { enabled: false },\n  scrollBeyondLastLine: false\n};\n\nconst JSONCodeViewer = ({ value }: { value: object | null }) => {\n  return (\n    <MonacoEditor\n      height={300}\n      value={value ? JSON.stringify(value, null, 4) : \"\"}\n      language=\"json\"\n      options={options}\n    />\n  );\n};\n\nexport default JSONCodeViewer;\n","import React from \"react\";\nimport { List, ListItem } from \"@rmwc/list\";\nimport \"@material/list/dist/mdc.list.css\";\nimport { Icon } from \"@rmwc/icon\";\nimport \"@rmwc/icon/icon.css\";\nimport { Query, languageOptions } from \"./queries\";\nimport \"./QueryHistory.css\";\n\nconst QueryHistory = ({ queries }: { queries: Query[] }) => (\n  <List className=\"QueryHistory\">\n    {[...queries].reverse().map(query => {\n      const option = languageOptions.find(\n        option => option.value === query.language\n      );\n      return (\n        <ListItem key={query.id}>\n          <div className=\"time\">{query.time.toLocaleString()}</div>\n          <div className=\"status\">\n            {query.result ? (\n              \"error\" in query.result ? (\n                <Icon icon=\"error\" />\n              ) : (\n                <Icon icon=\"check_circle\" />\n              )\n            ) : null}\n          </div>\n          <div className=\"language\">{option && option.label}</div>\n          <div className=\"query\">{query.text}</div>\n        </ListItem>\n      );\n    })}\n  </List>\n);\n\nexport default QueryHistory;\n","import React, { useState } from \"react\";\nimport { Card } from \"@rmwc/card\";\nimport \"@material/card/dist/mdc.card.css\";\nimport { TabBar, Tab } from \"@rmwc/tabs\";\nimport \"@material/tab-scroller/dist/mdc.tab-scroller.css\";\nimport \"@material/tab-indicator/dist/mdc.tab-indicator.css\";\nimport \"@material/tab-bar/dist/mdc.tab-bar.css\";\nimport \"@material/tab/dist/mdc.tab.css\";\nimport QueryEditor from \"./QueryEditor\";\nimport JSONCodeViewer from \"./JSONCodeViewer\";\nimport QueryHistory from \"./QueryHistory\";\nimport { Query, runQuery } from \"./queries\";\n\nconst ACTIVE_QUERY_INITIAL_STATE: number | null = null;\nconst QUERIES_INITIAL_STATE: Query[] = [];\n\ntype Props = {\n  serverURL: string;\n};\n\nfunction QueryPage({ serverURL }: Props) {\n  const [activeTabIndex, setActiveTabIndex] = useState(0);\n\n  const [activeQuery, setActiveQuery] = useState(ACTIVE_QUERY_INITIAL_STATE);\n  const [queries, setQueries] = useState(QUERIES_INITIAL_STATE);\n\n  const handleRun = React.useCallback(\n    (query, language) => {\n      const id = queries.length;\n      setActiveQuery(id);\n      setQueries(queries => [\n        ...queries,\n        { id, text: query, result: null, language, time: new Date() }\n      ]);\n      runQuery(serverURL, language, query)\n        .then(result => {\n          setQueries(queries =>\n            queries.map(query => {\n              if (query.id === id) {\n                return { ...query, result };\n              } else {\n                return query;\n              }\n            })\n          );\n        })\n        .catch(error => {\n          alert(error);\n        });\n    },\n    [queries, serverURL]\n  );\n\n  const currentQuery = queries.find(query => query.id === activeQuery);\n  const result = currentQuery ? currentQuery.result : null;\n\n  return (\n    <main>\n      <QueryEditor onRun={handleRun} />\n      <Card>\n        <TabBar\n          style={{ width: \"30em\" }}\n          activeTabIndex={activeTabIndex}\n          onActivate={evt => setActiveTabIndex(evt.detail.index)}\n        >\n          <Tab>Results</Tab>\n          <Tab>Query History</Tab>\n        </TabBar>\n        {activeTabIndex === 0 && <JSONCodeViewer value={result} />}\n        {activeTabIndex === 1 && <QueryHistory queries={queries} />}\n      </Card>\n    </main>\n  );\n}\n\nexport default QueryPage;\n","import React, { useCallback, useState } from \"react\";\nimport QueryEditor from \"./QueryEditor\";\nimport JSONCodeViewer from \"./JSONCodeViewer\";\n\ntype Props = {\n  serverURL: string;\n};\n\nasync function getShape(serverURL: string, language: string, query: string) {\n  const res = await fetch(`${serverURL}/api/v1/shape/${language}`, {\n    method: \"POST\",\n    body: query\n  });\n  const { error, ...result } = await res.json();\n  if (error) {\n    throw new Error(error);\n  }\n  return result;\n}\n\nconst QueryShapePage = ({ serverURL }: Props) => {\n  const [result, setResult] = useState<object | null>(null);\n  const run = useCallback(\n    (query, language) => {\n      getShape(serverURL, language, query).then(setResult);\n    },\n    [serverURL]\n  );\n  return (\n    <main>\n      <QueryEditor onRun={run} />\n      <JSONCodeViewer value={result} />\n    </main>\n  );\n};\n\nexport default QueryShapePage;\n","import React, { useState, useEffect } from \"react\";\nimport { Graph } from \"@vx/network\";\nimport useDimensions from \"react-use-dimensions\";\nimport {\n  forceCenter,\n  forceLink,\n  forceManyBody,\n  forceSimulation\n} from \"d3-force\";\n\ntype GraphData = {\n  nodes: { id: string }[];\n  links: { source: string; target: string }[];\n};\n\nconst INITIAL_FORCE_DATA: GraphData = { nodes: [], links: [] };\n\ntype Props = {\n  data: GraphData;\n  linkComponent: any;\n  nodeComponent: any;\n};\n\nconst ForceGraph = ({ data, linkComponent, nodeComponent }: Props) => {\n  const [forceData, setForceData] = useState(INITIAL_FORCE_DATA);\n  const [ref, { width, height }] = useDimensions();\n  useEffect(() => {\n    if (data && width && height) {\n      // @ts-ignore\n      const force = forceSimulation(data.nodes)\n        .force(\n          \"link\",\n          forceLink()\n            // @ts-ignore\n            .id(d => d.id)\n            .links(data.links)\n            .distance(100)\n        )\n        .force(\"charge\", forceManyBody())\n        .force(\"center\", forceCenter(width / 2, height / 2));\n\n      // Force-update the component on each force tick\n      force.on(\"tick\", () => {\n        setForceData({ ...data });\n      });\n    }\n  }, [data, height, width]);\n  return (\n    <div className=\"graph\" ref={ref}>\n      <svg>\n        <Graph\n          graph={forceData}\n          linkComponent={linkComponent}\n          nodeComponent={nodeComponent}\n        />\n      </svg>\n    </div>\n  );\n};\n\nexport default ForceGraph;\n","import React, { useCallback, useState } from \"react\";\nimport QueryEditor from \"./QueryEditor\";\nimport ForceGraph from \"./ForceGraph\";\nimport { runQuery, QueryResult } from \"./queries\";\nimport \"./VisualizePage.css\";\n\ntype Props = {\n  serverURL: string;\n};\n\ntype GraphData = {\n  nodes: { id: string }[];\n  links: { source: string; target: string }[];\n};\n\nconst resultToGraph = (\n  result: Array<{ source: { \"@id\": string }; target: { \"@id\": string } }>\n): GraphData => {\n  const links = [];\n  const nodes = new Set();\n  for (const row of result) {\n    if (!(\"source\" in row) || !(\"target\" in row)) {\n      continue;\n    }\n    const {\n      source: { \"@id\": source },\n      target: { \"@id\": target }\n    } = row;\n    nodes.add(source);\n    nodes.add(target);\n    links.push({ source, target });\n  }\n  // @ts-ignore\n  return { links, nodes: [...nodes.values()].map(id => ({ id })) };\n};\n\nconst Link = ({\n  link\n}: {\n  link: {\n    id: string;\n    source: { x: number; y: number };\n    target: { x: number; y: number };\n  };\n}) => (\n  <line\n    x1={link.source.x}\n    y1={link.source.y}\n    x2={link.target.x}\n    y2={link.target.y}\n    strokeWidth={2}\n    stroke=\"#999\"\n    strokeOpacity={0.6}\n  >\n    <text>{link.id}</text>\n  </line>\n);\n\nconst Node = ({ node }: { node: { id: string } }) => (\n  <g>\n    <circle r={5} fill=\"#21D4FD\" />\n    <text textAnchor=\"end\">{node.id}</text>\n  </g>\n);\n\nconst VisualizePage = ({ serverURL }: Props) => {\n  const [result, setResult] = useState<QueryResult>(null);\n  const handleRun = useCallback(\n    (query, language) => {\n      runQuery(serverURL, language, query).then(result => {\n        setResult(result);\n      });\n    },\n    [serverURL]\n  );\n  return (\n    <main>\n      <QueryEditor onRun={handleRun} />\n      {result && \"result\" in result ? (\n        <ForceGraph\n          data={resultToGraph(result.result)}\n          nodeComponent={Node}\n          linkComponent={Link}\n        />\n      ) : null}\n    </main>\n  );\n};\n\nexport default VisualizePage;\n","import React, { useCallback, useState, useRef } from \"react\";\nimport MonacoEditor from \"@monaco-editor/react\";\nimport { Typography } from \"@rmwc/typography\";\nimport \"@material/typography/dist/mdc.typography.css\";\nimport { Select } from \"@rmwc/select\";\nimport \"@material/select/dist/mdc.select.css\";\nimport { Button } from \"@rmwc/button\";\nimport \"@material/button/dist/mdc.button.css\";\nimport RunButton from \"./RunButton\";\nimport { useEditor } from \"./monaco-util\";\n\ntype Props = {\n  serverURL: string;\n};\n\nconst write = (serverURL: string, value: string | File): Promise<Response> =>\n  fetch(`${serverURL}/api/v2/write`, {\n    method: \"POST\",\n    body: value\n  });\n\nconst runDelete = (serverURL: string, value: string): Promise<Response> =>\n  fetch(`${serverURL}/api/v2/delete`, {\n    method: \"POST\",\n    body: value\n  });\n\nconst options = [\n  { label: \"Write\", value: \"write\" },\n  { label: \"Delete\", value: \"delete\" }\n];\n\nconst WritePage = ({ serverURL }: Props) => {\n  const [mode, setMode] = useState(options[0].value);\n  const [handleEditorMount, editor] = useEditor();\n  const handleRunButtonClick = useCallback(() => {\n    if (!editor) {\n      return;\n    }\n    const value = editor.getValue();\n    switch (mode) {\n      case \"write\": {\n        write(serverURL, value);\n        return;\n      }\n      case \"delete\": {\n        runDelete(serverURL, value);\n        return;\n      }\n      default: {\n        throw new Error(`Unexpected mode ${mode}`);\n      }\n    }\n  }, [serverURL, editor, mode]);\n  const handleModeChange = useCallback(\n    event => {\n      setMode(event.target.value);\n    },\n    [setMode]\n  );\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const openFileMenu = useCallback(() => {\n    const fileInput = fileInputRef.current;\n    if (fileInput) {\n      fileInput.click();\n    }\n  }, [fileInputRef]);\n  const handleFileInputChange = useCallback(\n    event => {\n      for (const file of event.currentTarget.files) {\n        write(serverURL, file).then(() => {\n          console.log(`Uploaded ${file.name}`);\n        });\n      }\n    },\n    [serverURL]\n  );\n  return (\n    <>\n      <input\n        type=\"file\"\n        ref={fileInputRef}\n        style={{ display: \"none\" }}\n        onChange={handleFileInputChange}\n      />\n      <main>\n        <Typography use=\"headline6\">Write</Typography>\n        <MonacoEditor\n          editorDidMount={handleEditorMount}\n          language=\"nquads\"\n          options={{ minimap: { enabled: false } }}\n        />\n        <div className=\"actions\">\n          <RunButton onClick={handleRunButtonClick} />\n          <Select\n            outlined\n            options={options}\n            value={mode}\n            onChange={handleModeChange}\n          />\n          <Button label=\"Upload file\" onClick={openFileMenu} />\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default WritePage;\n","import React, { useState } from \"react\";\nimport QueryPage from \"./QueryPage\";\nimport QueryShapePage from \"./QueryShapePage\";\nimport VisualizePage from \"./VisualizePage\";\nimport WritePage from \"./WritePage\";\nimport { Drawer, DrawerHeader, DrawerTitle, DrawerContent } from \"@rmwc/drawer\";\nimport { List, ListItem } from \"@rmwc/list\";\nimport \"@material/list/dist/mdc.list.css\";\nimport \"@material/drawer/dist/mdc.drawer.css\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst { REACT_APP_SERVER_URL: SERVER_URL } = process.env;\n\nfunction App() {\n  if (SERVER_URL === undefined) {\n    throw new Error(`SERVER_URL environment variable must be provided`);\n  }\n  /** @todo use router */\n  const [page, setPage] = useState(\"query\");\n  return (\n    <div className=\"App\">\n      <Drawer>\n        <DrawerHeader>\n          <DrawerTitle>\n            <img className=\"Logo\" src={logo} alt=\"logo\" />\n            Cayley\n          </DrawerTitle>\n        </DrawerHeader>\n        <DrawerContent>\n          <List>\n            <ListItem\n              onClick={() => setPage(\"query\")}\n              activated={page === \"query\"}\n            >\n              Query\n            </ListItem>\n            <ListItem\n              activated={page === \"queryShape\"}\n              onClick={() => setPage(\"queryShape\")}\n            >\n              Query Shape\n            </ListItem>\n            <ListItem\n              activated={page === \"visualize\"}\n              onClick={() => setPage(\"visualize\")}\n            >\n              Visualize\n            </ListItem>\n            <ListItem\n              activated={page === \"write\"}\n              onClick={() => setPage(\"write\")}\n            >\n              Write\n            </ListItem>\n          </List>\n        </DrawerContent>\n      </Drawer>\n      {page === \"query\" && <QueryPage serverURL={SERVER_URL} />}\n      {page === \"queryShape\" && <QueryShapePage serverURL={SERVER_URL} />}\n      {page === \"visualize\" && <VisualizePage serverURL={SERVER_URL} />}\n      {page === \"write\" && <WritePage serverURL={SERVER_URL} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}